1. List Interface
Definition: A List is an ordered collection (also called a sequence). Lists can contain duplicate elements and allow positional access (indexing).

Common Implementations:
ArrayList: Dynamic array.
LinkedList: Doubly linked list.
Example of ArrayList:

import java.util.ArrayList;

public class ListExample {
    public static void main(String[] args) {
        // Create an ArrayList
        ArrayList<String> fruits = new ArrayList<>();

        // Add elements to the list
        fruits.add("Apple");
        fruits.add("Banana");
        fruits.add("Mango");

        // Access elements by index
        System.out.println("First fruit: " + fruits.get(0));

        // Loop through the list
        for (String fruit : fruits) {
            System.out.println(fruit);
        }

        // Remove an element
        fruits.remove("Banana");

        System.out.println("After removal: " + fruits);
    }
}
Example of LinkedList:


import java.util.LinkedList;

public class LinkedListExample {
    public static void main(String[] args) {
        // Create a LinkedList
        LinkedList<Integer> numbers = new LinkedList<>();

        // Add elements to the list
        numbers.add(10);
        numbers.add(20);
        numbers.add(30);

        // Add elements at specific positions
        numbers.addFirst(5);
        numbers.addLast(40);

        // Remove elements
        numbers.removeFirst();
        numbers.removeLast();

        System.out.println("Updated List: " + numbers);
    }
}
2. Set Interface
Definition: A Set is a collection that does not allow duplicate elements.
Common Implementations:

HashSet: A set backed by a hash table.
LinkedHashSet: A set that maintains the insertion order.
TreeSet: A set that sorts the elements in natural order (or using a comparator).

Example of HashSet:

import java.util.HashSet;

public class HashSetExample {
    public static void main(String[] args) {
        // Create a HashSet
        HashSet<String> cities = new HashSet<>();

        // Add elements
        cities.add("New York");
        cities.add("Los Angeles");
        cities.add("Chicago");
        cities.add("New York"); // Duplicate, will be ignored

        // Display set elements (order is not guaranteed)
        System.out.println(cities);

        // Check if element exists
        System.out.println("Contains 'Chicago'? " + cities.contains("Chicago"));
    }
}
Example of TreeSet:

import java.util.TreeSet;

public class TreeSetExample {
    public static void main(String[] args) {
        // Create a TreeSet (sorted)
        TreeSet<Integer> numbers = new TreeSet<>();

        // Add elements
        numbers.add(50);
        numbers.add(20);
        numbers.add(40);
        numbers.add(10);

        // Display sorted elements
        System.out.println(numbers);

        // Remove an element
        numbers.remove(20);
        System.out.println("After removal: " + numbers);
    }
}
3. Map Interface
Definition: A Map is a collection of key-value pairs, where each key is unique.
Common Implementations:
HashMap: A hash table-based implementation of Map.
TreeMap: A sorted Map implementation.
LinkedHashMap: A hash map that maintains insertion order.

Example of HashMap:

import java.util.HashMap;

public class HashMapExample {
    public static void main(String[] args) {
        // Create a HashMap
        HashMap<String, Integer> stock = new HashMap<>();

        // Add key-value pairs
        stock.put("Apple", 50);
        stock.put("Banana", 30);
        stock.put("Mango", 20);

        // Get value by key
        System.out.println("Stock of Apple: " + stock.get("Apple"));

        // Remove an entry by key
        stock.remove("Banana");

        // Iterate through the Map
        for (String key : stock.keySet()) {
            System.out.println(key + ": " + stock.get(key));
        }
    }
}
Example of TreeMap:

import java.util.TreeMap;

public class TreeMapExample {
    public static void main(String[] args) {
        // Create a TreeMap (sorted by key)
        TreeMap<String, Integer> scores = new TreeMap<>();

        // Add entries
        scores.put("Alice", 95);
        scores.put("Bob", 75);
        scores.put("Charlie", 85);

        // Display sorted map
        System.out.println(scores);

        // Get specific value
        System.out.println("Alice's score: " + scores.get("Alice"));
    }
}
4. Queue Interface
Definition: A Queue is used to hold elements prior to processing and typically follows FIFO (First In, First Out) order.
Common Implementations:
LinkedList: Implements Queue as well as List.
PriorityQueue: A queue where elements are ordered according to their natural ordering or a custom comparator.

Example of Queue:

import java.util.LinkedList;
import java.util.Queue;

public class QueueExample {
    public static void main(String[] args) {
        // Create a Queue
        Queue<String> customers = new LinkedList<>();

        // Add elements to the queue
        customers.add("John");
        customers.add("Alice");
        customers.add("Bob");

        // Process elements in FIFO order
        System.out.println("Next customer: " + customers.poll());
        System.out.println("Next customer: " + customers.poll());

        // Peek at the next element without removing
        System.out.println("Next in line: " + customers.peek());
    }
}

5. Collections Utility Class
Definition: The Collections class provides utility methods for common tasks like sorting, searching, reversing, etc.

Common Methods:
sort(List): Sorts the list.
reverse(List): Reverses the list.
shuffle(List): Randomizes the order of elements.
binarySearch(List, Object): Searches for a key in a sorted list.


Example of Collections Utility Methods:

import java.util.ArrayList;
import java.util.Collections;

public class CollectionsExample {
    public static void main(String[] args) {
        ArrayList<Integer> numbers = new ArrayList<>();
        numbers.add(5);
        numbers.add(2);
        numbers.add(9);
        numbers.add(1);

        // Sort the list
        Collections.sort(numbers);
        System.out.println("Sorted: " + numbers);

        // Reverse the list
        Collections.reverse(numbers);
        System.out.println("Reversed: " + numbers);

        // Shuffle the list
        Collections.shuffle(numbers);
        System.out.println("Shuffled: " + numbers);
    }
}
6. Arrays Utility Class
Definition: The Arrays class provides utility methods to work with arrays, such as sorting, searching, and converting arrays to lists.

Common Methods:
Arrays.toList(array): Converts an array to a list.
Arrays.sort(array): Sorts an array.
Arrays.binarySearch(array, key): Searches for a key in a sorted array.

Example of Arrays Utility Methods:

import java.util.Arrays;

public class ArraysExample {
    public static void main(String[] args) {
        int[] numbers = {4, 2, 9, 1, 7};

        // Sort the array
        Arrays.sort(numbers);
        System.out.println("Sorted: " + Arrays.toString(numbers));

        // Binary search in a sorted array
        int index = Arrays.binarySearch(numbers, 9);
        System.out.println("Index of 9: " + index);
    }
}

